searchNodes=[{"doc":"Payeezy client library for Elixir. Right now this only supports GiftCardAdditional and GiftCardPurchase endpoints. More support will come as needed. For api reference, please visit: https://developer.payeezy.com/payeezy-api/apis/","ref":"Payeezy.html","title":"Payeezy","type":"module"},{"doc":"Convenience function for retrieving payeezy specfic environment values, but will raise an exception if values are missing. Example iex&gt; Payeezy . get_env ( :random_value ) ** (Payeezy.ConfigError) missing config for :random_value","ref":"Payeezy.html#get_env/1","title":"Payeezy.get_env/1","type":"function"},{"doc":"Client module for Payeezy API.","ref":"Payeezy.Client.html","title":"Payeezy.Client","type":"module"},{"doc":"Performs POST request and returns parsed response.","ref":"Payeezy.Client.html#post/2","title":"Payeezy.Client.post/2","type":"function"},{"doc":"A general purpose response wrapper that is built for any failed API response.","ref":"Payeezy.ErrorResponse.html","title":"Payeezy.ErrorResponse","type":"module"},{"doc":"","ref":"Payeezy.ErrorResponse.html#construct/1","title":"Payeezy.ErrorResponse.construct/1","type":"function"},{"doc":"","ref":"Payeezy.ErrorResponse.html#t:t/0","title":"Payeezy.ErrorResponse.t/0","type":"type"},{"doc":"Payeezy gift card requests including balance_inquiry, purchase, and refund","ref":"Payeezy.GiftCard.html","title":"Payeezy.GiftCard","type":"module"},{"doc":"Complete an activation for a given set of params","ref":"Payeezy.GiftCard.html#activation/1","title":"Payeezy.GiftCard.activation/1","type":"function"},{"doc":"Complete a balance_inquiry for a given set of params","ref":"Payeezy.GiftCard.html#balance_inquiry/1","title":"Payeezy.GiftCard.balance_inquiry/1","type":"function"},{"doc":"Complete a reload for a given set of params","ref":"Payeezy.GiftCard.html#cashout/1","title":"Payeezy.GiftCard.cashout/1","type":"function"},{"doc":"Complete a deactivation for a given set of params","ref":"Payeezy.GiftCard.html#deactivation/1","title":"Payeezy.GiftCard.deactivation/1","type":"function"},{"doc":"Complete a purchase for a given set of params","ref":"Payeezy.GiftCard.html#purchase/1","title":"Payeezy.GiftCard.purchase/1","type":"function"},{"doc":"Complete a refund for a given set of params","ref":"Payeezy.GiftCard.html#refund/1","title":"Payeezy.GiftCard.refund/1","type":"function"},{"doc":"Complete a reload for a given set of params","ref":"Payeezy.GiftCard.html#reload/1","title":"Payeezy.GiftCard.reload/1","type":"function"},{"doc":"Complete a void for a transaction_id and a given set of params","ref":"Payeezy.GiftCard.html#void/2","title":"Payeezy.GiftCard.void/2","type":"function"},{"doc":"","ref":"Payeezy.GiftCard.html#t:t/0","title":"Payeezy.GiftCard.t/0","type":"type"},{"doc":"Base client for all server interaction, used by all endpoint specific modules. This request wrapper coordinates the remote server, headers, authorization and SSL options. This uses HTTPoison.Base , so all of the typical HTTP verbs are available. Using Payeezy.HTTP requires the presence of four config values: apikey - Payeezy API key apisecret - Payeezy API secret token - Payeezy token endpoint - Payeezy endpoint URL All four must have values set or a Payeezy.ConfigError will be raised at runtime.","ref":"Payeezy.HTTP.html","title":"Payeezy.HTTP","type":"module"},{"doc":"Issues a DELETE request to the given url, raising an exception in case of failure. If the request does not fail, the response is returned. See request!/5 for more detailed information.","ref":"Payeezy.HTTP.html#delete!/3","title":"Payeezy.HTTP.delete!/3","type":"function"},{"doc":"Issues a DELETE request to the given url. Returns {:ok, response} if the request is successful, {:error, reason} otherwise. See request/5 for more detailed information.","ref":"Payeezy.HTTP.html#delete/3","title":"Payeezy.HTTP.delete/3","type":"function"},{"doc":"Issues a GET request to the given url, raising an exception in case of failure. If the request does not fail, the response is returned. See request!/5 for more detailed information.","ref":"Payeezy.HTTP.html#get!/3","title":"Payeezy.HTTP.get!/3","type":"function"},{"doc":"Issues a GET request to the given url. Returns {:ok, response} if the request is successful, {:error, reason} otherwise. See request/5 for more detailed information.","ref":"Payeezy.HTTP.html#get/3","title":"Payeezy.HTTP.get/3","type":"function"},{"doc":"Issues a HEAD request to the given url, raising an exception in case of failure. If the request does not fail, the response is returned. See request!/5 for more detailed information.","ref":"Payeezy.HTTP.html#head!/3","title":"Payeezy.HTTP.head!/3","type":"function"},{"doc":"Issues a HEAD request to the given url. Returns {:ok, response} if the request is successful, {:error, reason} otherwise. See request/5 for more detailed information.","ref":"Payeezy.HTTP.html#head/3","title":"Payeezy.HTTP.head/3","type":"function"},{"doc":"Issues a OPTIONS request to the given url, raising an exception in case of failure. If the request does not fail, the response is returned. See request!/5 for more detailed information.","ref":"Payeezy.HTTP.html#options!/3","title":"Payeezy.HTTP.options!/3","type":"function"},{"doc":"Issues an OPTIONS request to the given url. Returns {:ok, response} if the request is successful, {:error, reason} otherwise. See request/5 for more detailed information.","ref":"Payeezy.HTTP.html#options/3","title":"Payeezy.HTTP.options/3","type":"function"},{"doc":"Issues a PATCH request to the given url, raising an exception in case of failure. If the request does not fail, the response is returned. See request!/5 for more detailed information.","ref":"Payeezy.HTTP.html#patch!/4","title":"Payeezy.HTTP.patch!/4","type":"function"},{"doc":"Issues a PATCH request to the given url. Returns {:ok, response} if the request is successful, {:error, reason} otherwise. See request/5 for more detailed information.","ref":"Payeezy.HTTP.html#patch/4","title":"Payeezy.HTTP.patch/4","type":"function"},{"doc":"Issues a POST request to the given url, raising an exception in case of failure. If the request does not fail, the response is returned. See request!/5 for more detailed information.","ref":"Payeezy.HTTP.html#post!/4","title":"Payeezy.HTTP.post!/4","type":"function"},{"doc":"Issues a POST request to the given url. Returns {:ok, response} if the request is successful, {:error, reason} otherwise. See request/5 for more detailed information.","ref":"Payeezy.HTTP.html#post/4","title":"Payeezy.HTTP.post/4","type":"function"},{"doc":"","ref":"Payeezy.HTTP.html#process_headers/1","title":"Payeezy.HTTP.process_headers/1","type":"function"},{"doc":"","ref":"Payeezy.HTTP.html#process_request_options/1","title":"Payeezy.HTTP.process_request_options/1","type":"function"},{"doc":"","ref":"Payeezy.HTTP.html#process_response_chunk/1","title":"Payeezy.HTTP.process_response_chunk/1","type":"function"},{"doc":"","ref":"Payeezy.HTTP.html#process_status_code/1","title":"Payeezy.HTTP.process_status_code/1","type":"function"},{"doc":"Issues a PUT request to the given url, raising an exception in case of failure. If the request does not fail, the response is returned. See request!/5 for more detailed information.","ref":"Payeezy.HTTP.html#put!/4","title":"Payeezy.HTTP.put!/4","type":"function"},{"doc":"Issues a PUT request to the given url. Returns {:ok, response} if the request is successful, {:error, reason} otherwise. See request/5 for more detailed information.","ref":"Payeezy.HTTP.html#put/4","title":"Payeezy.HTTP.put/4","type":"function"},{"doc":"Issues an HTTP request with the given method to the given url, raising an exception in case of failure. request!/5 works exactly like request/5 but it returns just the response in case of a successful request, raising an exception in case the request fails.","ref":"Payeezy.HTTP.html#request!/5","title":"Payeezy.HTTP.request!/5","type":"function"},{"doc":"Issues an HTTP request with the given method to the given url. This function is usually used indirectly by get/3 , post/4 , put/4 , etc Args: method - HTTP method as an atom ( :get , :head , :post , :put , :delete , etc.) url - target url as a binary string or char list body - request body. See more below headers - HTTP headers as an orddict (e.g., [{&quot;Accept&quot;, &quot;application/json&quot;}] ) options - Keyword list of options Body: binary, char list or an iolist {:form, [{K, V}, ...]} - send a form url encoded {:file, &quot;/path/to/file&quot;} - send a file {:stream, enumerable} - lazily send a stream of binaries/charlists Options: :timeout - timeout to establish a connection, in milliseconds. Default is 8000 :recv_timeout - timeout used when receiving a connection. Default is 5000 :stream_to - a PID to stream the response to :async - if given :once , will only stream one message at a time, requires call to stream_next :proxy - a proxy to be used for the request; it can be a regular url or a {Host, Port} tuple, or a {:socks5, ProxyHost, ProxyPort} tuple * :proxy_auth - proxy authentication {User, Password} tuple * :socks5_user - socks5 username * :socks5_pass - socks5 password * :ssl - SSL options supported by the ssl erlang module * :follow_redirect - a boolean that causes redirects to be followed * :max_redirect - an integer denoting the maximum number of redirects to follow * :params - an enumerable consisting of two-item tuples that will be appended to the url as query string parameters Timeouts can be an integer or :infinity This function returns or if the request is successful, ` otherwise. ## Examples request(:post, &quot; https://my.website.com&quot; , &quot;{\\&quot;foo\\&quot;: 3}&quot;, [{&quot;Accept&quot;, &quot;application/json&quot;}])","ref":"Payeezy.HTTP.html#request/5","title":"Payeezy.HTTP.request/5","type":"function"},{"doc":"Starts HTTPoison and its dependencies.","ref":"Payeezy.HTTP.html#start/0","title":"Payeezy.HTTP.start/0","type":"function"},{"doc":"Requests the next message to be streamed for a given HTTPoison.AsyncResponse . See request!/5 for more detailed information.","ref":"Payeezy.HTTP.html#stream_next/1","title":"Payeezy.HTTP.stream_next/1","type":"function"},{"doc":"","ref":"Payeezy.HTTP.html#t:body/0","title":"Payeezy.HTTP.body/0","type":"type"},{"doc":"","ref":"Payeezy.HTTP.html#t:headers/0","title":"Payeezy.HTTP.headers/0","type":"type"},{"doc":"","ref":"Payeezy.PostTransaction.html","title":"Payeezy.PostTransaction","type":"module"},{"doc":"","ref":"Payeezy.PostTransaction.html#handle_response/3","title":"Payeezy.PostTransaction.handle_response/3","type":"function"},{"doc":"","ref":"Payeezy.PostTransaction.html#log_and_return_error/1","title":"Payeezy.PostTransaction.log_and_return_error/1","type":"function"},{"doc":"","ref":"Payeezy.Util.html","title":"Payeezy.Util","type":"module"},{"doc":"Recursively convert a map of string keys into a map with atom keys. Intended to prepare responses for conversion into structs. Note that it only converts strings to known atoms. Example iex&gt; Payeezy.Util . atomize ( %{ &quot;a&quot; =&gt; 1 , &quot;b&quot; =&gt; %{ &quot;c&quot; =&gt; 2 } } ) %{ a : 1 , b : %{ c : 2 } }","ref":"Payeezy.Util.html#atomize/1","title":"Payeezy.Util.atomize/1","type":"function"},{"doc":"Raised at runtime when a config variable is missing.","ref":"Payeezy.ConfigError.html","title":"Payeezy.ConfigError","type":"exception"}]